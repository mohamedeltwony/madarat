{"type":"test-group","name":"Demo Audit","description":"These are example tests that demonstrate the functionality and structure of audits.","tests":[{"type":"test-group","name":"Result Levels","description":"These are all of the different test result levels.","tests":[{"type":"test-case","name":"level-pass","description":"This is what the result of a passing test with no data looks like.","test":"function() {\n    return {level: \"pass\"};\n}"},{"type":"test-case","name":"level-warn","description":"This is what the result of a warning test with no data looks like.","test":"function() {\n    return {level: \"warn\"};\n}"},{"type":"test-case","name":"level-fail","description":"This is what the result of a failing test with no data looks like.","test":"function() {\n    return {level: \"fail\"};\n}"},{"type":"test-case","name":"level-error","description":"This is what the result of a test that threw an error with no data looks like.","test":"function() {\n    return {level: \"error\"};\n}"},{"type":"test-case","name":"level-unsupported","description":"This is what the result of an unsupported test with no data looks like.","test":"function() {\n    return {level: \"unsupported\"};\n}"}]},{"type":"test-group","name":"Result Data","description":"These are example tests that demonstrate all of the different types of data that can be returned with the test result.","tests":[{"type":"test-case","name":"data-domNodes","description":"This is an example of how result DOM nodes are shown. It will pass with the <body> element.","test":"function() {\n    return {level: \"pass\", domNodes: [document.body]};\n}"},{"type":"test-case","name":"data-domAttributes","description":"This is an example of how result DOM attributes are highlighted on any returned DOM nodes. It will pass with all elements with an id attribute.","test":"function() {\n    return {level: \"pass\", domNodes: Array.from(document.querySelectorAll(\"[id]\")), domAttributes: [\"id\"]};\n}"},{"type":"test-case","name":"data-errors","description":"This is an example of how errors are shown. The error was thrown manually, but execution errors will appear in the same way.","test":"function() {\n    throw Error(\"this error was thrown from inside the audit test code.\");\n}"},{"type":"test-case","name":"data-custom","description":"This is an example of how custom result data is shown.","supports":3,"test":"function() {\n    return {level: \"pass\", a: 1, b: [2], c: {key: 3}};\n}"}]},{"type":"test-group","name":"Specially Exposed Data","description":"These are example tests that demonstrate how to use WebInspectorAudit to access information not normally available to JavaScript.","supports":1,"tests":[{"type":"test-group","name":"Accessibility","description":"These are example tests that demonstrate how to use WebInspectorAudit.Accessibility to get information about the accessibility tree.","supports":1,"tests":[{"type":"test-case","name":"getElementsByComputedRole","description":"This is an example test that uses WebInspectorAudit.Accessibility.getElementsByComputedRole to find elements with a computed role of “link”.","supports":1,"test":"function() {\n    return {level: \"pass\", domNodes: WebInspectorAudit.Accessibility.getElementsByComputedRole(\"link\"), domAttributes: [\"role\"]};\n}"},{"type":"test-case","name":"getActiveDescendant","description":"This is an example test that uses WebInspectorAudit.Accessibility.getActiveDescendant to find any element that meets criteria for active descendant (“aria-activedescendant”) of the <body> element, if it exists.","supports":1,"test":"function() {\n    let result = {level: \"pass\"};\n    let activeDescendant = WebInspectorAudit.Accessibility.getActiveDescendant(document.body);\n    if (activeDescendant)\n        result.domNodes = [activeDescendant];\n    return result;\n}"},{"type":"test-case","name":"getChildNodes","description":"This is an example test that uses WebInspectorAudit.Accessibility.getChildNodes to find child nodes of the <body> element in the accessibility tree.","supports":1,"test":"function() {\n    let childNodes = WebInspectorAudit.Accessibility.getChildNodes(document.body);\n    return {level: \"pass\", domNodes: childNodes || []};\n}"},{"type":"test-case","name":"getComputedProperties","description":"This is an example test that uses WebInspectorAudit.Accessibility.getComputedProperties to find a variety of accessibility information about the <body> element.","supports":3,"test":"function() {\n    let domAttributes = [\"alt\", \"aria-atomic\", \"aria-busy\", \"aria-checked\", \"aria-current\", \"aria-disabled\", \"aria-expanded\", \"aria-haspopup\", \"aria-hidden\", \"aria-invalid\", \"aria-label\", \"aria-labelledby\", \"aria-level\", \"aria-live\", \"aria-pressed\", \"aria-readonly\", \"aria-relevant\", \"aria-required\", \"aria-selected\", \"role\", \"title\"].filter((attribute) => document.body.hasAttribute(attribute));\n    let computedProperties = WebInspectorAudit.Accessibility.getComputedProperties(document.body);\n    return {level: \"pass\", domNodes: [document.body], domAttributes, ...(computedProperties || {})};\n}"},{"type":"test-case","name":"getControlledNodes","description":"This is an example test that uses WebInspectorAudit.Accessibility.getControlledNodes to find all nodes controlled (“aria-controls”) by the <body> element, if any exist.","supports":1,"test":"function() {\n    let controlledNodes = WebInspectorAudit.Accessibility.getControlledNodes(document.body);\n    return {level: \"pass\", domNodes: controlledNodes || []};\n}"},{"type":"test-case","name":"getFlowedNodes","description":"This is an example test that uses WebInspectorAudit.Accessibility.getFlowedNodes to find all nodes flowed to (“aria-flowto”) from the <body> element, if any exist.","supports":1,"test":"function() {\n    let flowedNodes = WebInspectorAudit.Accessibility.getFlowedNodes(document.body);\n    return {level: \"pass\", domNodes: flowedNodes || []};\n}"},{"type":"test-case","name":"getMouseEventNode","description":"This is an example test that uses WebInspectorAudit.Accessibility.getMouseEventNode to find the node that would handle mouse events for the <body> element, if applicable.","supports":1,"test":"function() {\n    let result = {level: \"pass\"};\n    let mouseEventNode = WebInspectorAudit.Accessibility.getMouseEventNode(document.body);\n    if (mouseEventNode)\n        result.domNodes = [mouseEventNode];\n    return result;\n}"},{"type":"test-case","name":"getOwnedNodes","description":"This is an example test that uses WebInspectorAudit.Accessibility.getOwnedNodes to find all nodes owned (“aria-owns”) by the <body> element, if any exist.","supports":1,"test":"function() {\n    let ownedNodes = WebInspectorAudit.Accessibility.getOwnedNodes(document.body);\n    return {level: \"pass\", domNodes: ownedNodes || []};\n}"},{"type":"test-case","name":"getParentNode","description":"This is an example test that uses WebInspectorAudit.Accessibility.getParentNode to find the parent node of the <body> element in the accessibility tree.","supports":1,"test":"function() {\n    let result = {level: \"pass\"};\n    let parentNode = WebInspectorAudit.Accessibility.getParentNode(document.body);\n    if (parentNode)\n        result.domNodes = [parentNode];\n    return result;\n}"},{"type":"test-case","name":"getSelectedChildNodes","description":"This is an example test that uses WebInspectorAudit.Accessibility.getSelectedChildNodes to find all child nodes that are selected (“aria-selected”) of the <body> element in the accessibility tree.","supports":1,"test":"function() {\n    let selectedChildNodes = WebInspectorAudit.Accessibility.getSelectedChildNodes(document.body);\n    return {level: \"pass\", domNodes: selectedChildNodes || []};\n}"}]},{"type":"test-group","name":"DOM","description":"These are example tests that demonstrate how to use WebInspectorAudit.DOM to get information about DOM nodes.","supports":1,"tests":[{"type":"test-case","name":"hasEventListeners","description":"This is an example test that uses WebInspectorAudit.Accessibility.hasEventListeners to find data indicating whether the <body> element has any event listeners.","supports":3,"test":"function() {\n    let domAttributes = Array.from(document.body.attributes).filter((attribute) => attribute.name.startsWith(\"on\"));\n    return {level: \"pass\", domNodes: [document.body], domAttributes, hasEventListeners: WebInspectorAudit.DOM.hasEventListeners(document.body)};\n}"},{"type":"test-case","name":"hasEventListeners-click","description":"This is an example test that uses WebInspectorAudit.Accessibility.hasEventListenersClick to find data indicating whether the <body> element has any click event listeners.","supports":3,"test":"function() {\n    let domAttributes = [\"onclick\"].filter((attribute) => document.body.hasAttribute(attribute));\n    return {level: \"pass\", domNodes: [document.body], domAttributes, hasClickEventListener: WebInspectorAudit.DOM.hasEventListeners(document.body, \"click\")};\n}"}]},{"type":"test-group","name":"Resources","description":"These are example tests that demonstrate how to use WebInspectorAudit.Resources to get information about loaded resources.","supports":2,"tests":[{"type":"test-case","name":"getResources","description":"This is an example test that uses WebInspectorAudit.Accessibility.getResources to find basic information about each resource.","supports":3,"test":"function() {\n    return {level: \"pass\", resources: WebInspectorAudit.Resources.getResources()};\n}"},{"type":"test-case","name":"getResourceContent","description":"This is an example test that uses WebInspectorAudit.Accessibility.getResourceContent to find the contents of the main resource.","supports":3,"test":"function() {\n    let resources = WebInspectorAudit.Resources.getResources();\n    let mainResource = resources.find((resource) => resource.url === window.location.href);\n    return {level: \"pass\", mainResource, resourceContent: WebInspectorAudit.Resources.getResourceContent(mainResource.id)};\n}"}]}]},{"type":"test-case","name":"unsupported","description":"This is an example of a test that will not run because it is unsupported.","supports":5,"test":"function() {\n    throw Error(\"this test should not be supported.\");\n}"}]}