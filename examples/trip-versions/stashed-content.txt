+import TripGallery from '@/components/TripGallery';
+import styles from '@/styles/pages/SingleTrip.module.scss';
+import dynamic from 'next/dynamic';
+import Breadcrumb from '@/components/Breadcrumb';
+import LocalizedLink from '@/components/LocalizedLink';
+import { decodeArabicUrl } from '@/utils/urlHelpers';
+import Image from 'next/image';
+
+// Dynamically import icons to avoid SSR issues
+const FaCalendarAlt = dynamic(() => import('react-icons/fa').then(mod => mod.FaCalendarAlt), { ssr: false });
+const FaMapMarkerAlt = dynamic(() => import('react-icons/fa').then(mod => mod.FaMapMarkerAlt), { ssr: false });
+const FaUsers = dynamic(() => import('react-icons/fa').then(mod => mod.FaUsers), { ssr: false });
+const FaStar = dynamic(() => import('react-icons/fa').then(mod => mod.FaStar), { ssr: false });
+const FaHotel = dynamic(() => import('react-icons/fa').then(mod => mod.FaHotel), { ssr: false });
+const FaPlane = dynamic(() => import('react-icons/fa').then(mod => mod.FaPlane), { ssr: false });
+const FaUtensils = dynamic(() => import('react-icons/fa').then(mod => mod.FaUtensils), { ssr: false });
+const FaCar = dynamic(() => import('react-icons/fa').then(mod => mod.FaCar), { ssr: false });
+const FaChevronDown = dynamic(() => import('react-icons/fa').then(mod => mod.FaChevronDown), { ssr: false });
+const FaChevronUp = dynamic(() => import('react-icons/fa').then(mod => mod.FaChevronUp), { ssr: false });
+const FaCheck = dynamic(() => import('react-icons/fa').then(mod => mod.FaCheck), { ssr: false });
+const FaTimes = dynamic(() => import('react-icons/fa').then(mod => mod.FaTimes), { ssr: false });
+const FaWhatsapp = dynamic(() => import('react-icons/fa').then(mod => mod.FaWhatsapp), { ssr: false });
+const FaUserFriends = dynamic(() => import('react-icons/fa').then(mod => mod.FaUserFriends), { ssr: false });
+const FaClock = dynamic(() => import('react-icons/fa').then(mod => mod.FaClock), { ssr: false });
+const FaCreditCard = dynamic(() => import('react-icons/fa').then(mod => mod.FaCreditCard), { ssr: false });
+const FaTimes2 = dynamic(() => import('react-icons/fa').then(mod => mod.FaTimes), { ssr: false });
 
 // Helper component for accordion sections
 const AccordionItem = ({ title, content, defaultOpen = false }) => {
   const [isOpen, setIsOpen] = useState(defaultOpen);
+  const [isClient, setIsClient] = useState(false);
+
+  useEffect(() => {
+    setIsClient(true);
+  }, []);
 
   return (
     <div className={`${styles.accordionItem} ${isOpen ? styles.open : ''}`}>
@@ -20,7 +48,7 @@ const AccordionItem = ({ title, content, defaultOpen = false }) => {
       >
         <h3>{title}</h3>
         <span className={styles.accordionIcon}>
-          {isOpen ? <FaChevronUp /> : <FaChevronDown />}
+          {isClient && (isOpen ? <FaChevronUp /> : <FaChevronDown />)}
         </span>
       </div>
       {isOpen && (
@@ -32,312 +60,801 @@ const AccordionItem = ({ title, content, defaultOpen = false }) => {
   );
 };
 
-// Helper to extract countries from trip description
-const extractCountries = (description) => {
-  const countries = [
-    'ايطاليا', 'فرنسا', 'المانيا', 'هولندا', 'اسبانيا', 'البوسنة', 
-    'تركيا', 'روسيا', 'بولندا', 'جورجيا', 'المملكة المتحدة', 'بريطانيا',
-    'لندن', 'باريس', 'روما', 'البندقية', 'برلين', 'أمستردام', 'مدريد',
-    'سراييفو', 'اسطنبول', 'موسكو', 'وارسو', 'تبليسي', 'سكتلندا'
+// Mobile bottom booking bar component
+const MobileBookingBar = ({ price, currency, handleBookNow, handleInquiry }) => {
+  const [isClient, setIsClient] = useState(false);
+
+  useEffect(() => {
+    setIsClient(true);
+  }, []);
+
+  return (
+    <div className={styles.mobileBookingBar}>
+      <div className={styles.mobilePrice}>
+        <span className={styles.priceValue}>
+          {price} {currency && (
+            <Image 
+              src="/Icons/Saudi_Riyal_Symbol-1-min.png"
+              alt="ريال سعودي"
+              width={20}
+              height={20}
+              className={styles.currencySymbol}
+              style={{ marginRight: '5px', verticalAlign: 'middle' }}
+            />
+          )}
+        </span>
+        <span className={styles.perPerson}>لكل شخص</span>
+      </div>
+      <div className={styles.mobileButtons}>
+        <button className={styles.bookButton} onClick={handleBookNow}>
+          حجز الآن
+        </button>
+        <button className={styles.whatsappButton} onClick={handleInquiry}>
+          {isClient && <FaWhatsapp />}
+        </button>
+      </div>
+    </div>
+  );
+};
+
+// Social proof component
+const SocialProof = () => {
+  const [isClient, setIsClient] = useState(false);
+  const [viewers, setViewers] = useState(0);
+  const [bookingsToday, setBookingsToday] = useState(0);
+
+  useEffect(() => {
+    setIsClient(true);
+    
+    // Generate a random viewer count between 5-70
+    const generateRandomViewers = () => {
+      const viewerCount = Math.floor(Math.random() * 66) + 5; // 5-70 range
+      setViewers(viewerCount);
+    };
+    
+    // Generate a consistent booking number for this trip between 1-10
+    // This is set once per page load and doesn't change with intervals
+    const tripBookingCount = Math.floor(Math.random() * 10) + 1; // 1-10 range
+    setBookingsToday(tripBookingCount);
+    
+    // Initial random viewers value
+    generateRandomViewers();
+    
+    // Update viewers every 5 seconds
+    const viewersInterval = setInterval(() => {
+      generateRandomViewers();
+    }, 5000);
+    
+    return () => {
+      clearInterval(viewersInterval);
+    };
+  }, []);
+
+  if (!isClient) return null;
+
+  return (
+    <div className={styles.socialProof}>
+      <div className={styles.socialProofItem}>
+        <FaUserFriends className={styles.socialProofIcon} />
+        <span>{viewers} شخص يشاهد هذه الرحلة الآن</span>
+      </div>
+      <div className={styles.socialProofItem}>
+        <FaClock className={styles.socialProofIcon} />
+        <span>تم حجز {bookingsToday} أشخاص اليوم</span>
+      </div>
+    </div>
+  );
+};
+
+// Booking Form Popup Component
+const BookingFormPopup = ({ isOpen, onClose, tripTitle, tripDestination }) => {
+  const [formData, setFormData] = useState({
+    name: '',
+    phone: '',
+    email: '',
+    destination: tripDestination || '',
+  });
+  const [isPhoneValid, setIsPhoneValid] = useState(true);
+  const [phoneTouched, setPhoneTouched] = useState(false);
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [isSubmitted, setIsSubmitted] = useState(false);
+  const [isClient, setIsClient] = useState(false);
+
+  // Available destinations list
+  const destinations = [
+    '— الرجاء تحديد اختيار —',
+    'جورجيا',
+    'أذربيجان',
+    'البوسنة',
+    'ألبانيا',
+    'تركيا',
+    'المالديف',
+    'ماليزيا',
+    'اندونيسيا',
+    'تايلاند',
+    'سريلانكا',
+    'موريشيوس',
+    'صلالة',
+    'اوزباكستان',
+    'جنوب افريقيا',
+    'سنغافورة',
+    'روسيا',
+    'الفلبين'
   ];
-  
-  const foundCountries = [];
-  const descriptionText = description.replace(/<[^>]*>/g, '').toLowerCase();
-  
-  countries.forEach(country => {
-    if (descriptionText.includes(country.toLowerCase())) {
-      foundCountries.push(country);
+
+  useEffect(() => {
+    setIsClient(true);
+    // Pre-select the trip destination if available
+    if (tripDestination) {
+      setFormData(prev => ({
+        ...prev,
+        destination: tripDestination
+      }));
     }
-  });
-  
-  return [...new Set(foundCountries)]; // Remove duplicates
+  }, [tripDestination]);
+
+  const handleInputChange = (e) => {
+    const { name, value } = e.target;
+    
+    if (name === 'phone') {
+      setPhoneTouched(true);
+      // Phone validation regex
+      const phoneRegex = /^(0|5|966)([0-9]{8,12})$/;
+      setIsPhoneValid(phoneRegex.test(value));
+    }
+    
+    setFormData({
+      ...formData,
+      [name]: value
+    });
+  };
+
+  const handleSubmit = async (e) => {
+    e.preventDefault();
+    
+    if (!isPhoneValid) {
+      return;
+    }
+    
+    setIsSubmitting(true);
+    
+    try {
+      // Here you would typically send form data to your backend
+      console.log('Form submitted:', formData);
+      
+      // Simulate API call
+      await new Promise(resolve => setTimeout(resolve, 1000));
+      
+      // Show success state
+      setIsSubmitted(true);
+      
+      // Close popup after delay
+      setTimeout(() => {
+        onClose();
+        setIsSubmitted(false);
+        setFormData({
+          name: '',
+          phone: '',
+          email: '',
+          destination: tripDestination || ''
+        });
+      }, 3000);
+      
+    } catch (error) {
+      console.error('Error submitting form:', error);
+      alert('حدث خطأ أثناء إرسال النموذج. يرجى المحاولة مرة أخرى.');
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  if (!isOpen) return null;
+
+  return (
+    <div className={styles.popupOverlay}>
+      <div className={styles.popupContent}>
+        <button className={styles.closePopupButton} onClick={onClose}>
+          {isClient && <FaTimes2 />}
+        </button>
+        
+        {!isSubmitted ? (
+          <>
+            <h2 className={styles.popupTitle}>
+              {tripTitle ? `حجز رحلة: ${tripTitle}` : 'حجز رحلة'}
+            </h2>
+            
+            <form onSubmit={handleSubmit} className={styles.bookingForm}>
+              <div className={`${styles.formGroup} ${styles.floatingLabelGroup} ${styles.phoneGroup} ${formData.phone ? styles.hasValue : ''} ${phoneTouched && !isPhoneValid && formData.phone.trim() !== '' ? styles.inputError : ''}`}>
+                <div className={styles.phoneInput}>
+                  <input
+                    type="tel"
+                    id="phone"
+                    className={styles.formInput}
+                    name="phone"
+                    value={formData.phone}
+                    onChange={handleInputChange}
+                    onFocus={() => setPhoneTouched(true)}
+                    onBlur={() => setPhoneTouched(true)}
+                    placeholder=" "
+                    autoComplete="tel"
+                    required
+                  />
+                </div>
+                <label htmlFor="phone" className={styles.formLabel}>
+                  الجوال
+                </label>
+              </div>
+              {phoneTouched && !isPhoneValid && formData.phone.trim() !== '' && (
+                <p className={styles.errorMessage}>
+                  يجب أن يبدأ الرقم بـ 0 أو 5 أو 966 ويتكون من المقطع المناسب من الأرقام.
+                </p>
+              )}
+              
+              <div className={`${styles.formGroup} ${styles.floatingLabelGroup}`}>
+                <input
+                  type="text"
+                  id="name"
+                  className={styles.formInput}
+                  name="name"
+                  value={formData.name}
+                  onChange={handleInputChange}
+                  placeholder=" "
+                  autoComplete="name"
+                />
+                <label htmlFor="name" className={styles.formLabel}>
+                  الاسم الكامل (اختياري)
+                </label>
+              </div>
+              
+              <div className={`${styles.formGroup} ${styles.floatingLabelGroup}`}>
+                <input
+                  type="email"
+                  id="email"
+                  className={styles.formInput}
+                  name="email"
+                  value={formData.email}
+                  onChange={handleInputChange}
+                  placeholder=" "
+                  autoComplete="email"
+                />
+                <label htmlFor="email" className={styles.formLabel}>
+                  البريد الإلكتروني (اختياري)
+                </label>
+              </div>
+              
+              <div className={`${styles.formGroup} ${styles.floatingLabelGroup} ${formData.destination ? styles.hasValue : ''}`}>
+                <select
+                  id="destination"
+                  name="destination"
+                  className={styles.formSelect}
+                  value={formData.destination}
+                  onChange={handleInputChange}
+                  required
+                >
+                  {destinations.map((destination, index) => (
+                    <option key={index} value={destination}>
+                      {destination}
+                    </option>
+                  ))}
+                </select>
+                <label htmlFor="destination" className={styles.formLabel}>
+                  الوجهة
+                </label>
+              </div>
+              
+              <button
+                type="submit"
+                className={styles.bookingSubmitButton}
+                disabled={isSubmitting}
+              >
+                {isSubmitting ? 'جاري الإرسال...' : 'إرسال طلب الحجز'}
+              </button>
+            </form>
+          </>
+        ) : (
+          <div className={styles.successMessage}>
+            <div className={styles.successIcon}>✓</div>
+            <h3>تم استلام طلبك بنجاح!</h3>
+            <p>سيتواصل معك فريقنا في أقرب وقت ممكن.</p>
+          </div>
+        )}
+      </div>
+    </div>
+  );
 };
 
-export default function SingleTrip({ trip }) {
-  const [sticky, setSticky] = useState(false);
-  
+export default function SingleTrip({ tripData, rawApiData = false }) {
+  const router = useRouter();
+  const { slug } = router.query;
+  const [trip, setTrip] = useState(null);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState(null);
+  const [isClient, setIsClient] = useState(false);
+  const [stickyBooking, setStickyBooking] = useState(false);
+  const [isBookingPopupOpen, setIsBookingPopupOpen] = useState(false);
+
   useEffect(() => {
+    setIsClient(true);
+    
+    // Handle scroll for sticky booking widget
     const handleScroll = () => {
-      setSticky(window.scrollY > 500);
+      const scrollPosition = window.scrollY;
+      const threshold = 300; // Adjust based on when you want the stickiness to start
+      
+      if (scrollPosition > threshold) {
+        setStickyBooking(true);
+      } else {
+        setStickyBooking(false);
+      }
     };
     
     window.addEventListener('scroll', handleScroll);
     return () => window.removeEventListener('scroll', handleScroll);
   }, []);
+
+  useEffect(() => {
+    if (!slug) return;
+
+    const fetchTripData = async () => {
+      try {
+        setLoading(true);
+        // Only use server-provided data, no static or mock data
+        if (tripData && rawApiData) {
+          console.log("Using API trip data:", tripData);
+          setTrip(tripData);
+        } else {
+          // Don't use any mock data anymore
+          console.log("No API data available");
+          setError("بيانات الرحلة غير متوفرة حالياً");
+        }
+      } catch (err) {
+        console.error("Error fetching trip data:", err);
+        setError("حدث خطأ أثناء تحميل بيانات الرحلة. الرجاء المحاولة مرة أخرى.");
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    fetchTripData();
+  }, [slug, tripData, rawApiData]);
   
-  if (!trip) {
+  // Handle booking and inquiry actions
+  const handleBookNow = () => {
+    console.log('Book now clicked');
+    // Open booking popup form instead of redirecting to WhatsApp
+    setIsBookingPopupOpen(true);
+  };
+  
+  const handleInquiry = () => {
+    console.log('Inquiry clicked');
+    // Implement inquiry logic or redirect to WhatsApp
+    window.open('https://wa.me/966920034019?text=استفسار عن رحلة ' + (trip?.title || ''), '_blank');
+  };
+
+  if (loading) {
     return (
       <Layout>
-        <Section>
-          <Container>
-            <div className={styles.error}>
-              <h2>عذراً، لم نجد الرحلة</h2>
-              <p>الرحلة التي تبحث عنها غير موجودة</p>
-            </div>
-          </Container>
-        </Section>
+        <Container>
+          <div className={styles.loadingContainer}>
+            <div className={styles.loadingSpinner}></div>
+            <p>جاري تحميل معلومات الرحلة...</p>
+          </div>
+        </Container>
       </Layout>
     );
   }
 
-  const hasItineraries = trip.itineraries && trip.itineraries.length > 0;
-  const hasFaqs = trip.faqs && trip.faqs.length > 0;
-  
-  // Extract highlights from description
-  const countries = extractCountries(trip.description);
+  if (error || !trip) {
+    return (
+      <Layout>
+        <Container>
+          <div className={styles.errorContainer}>
+            <h2>عذراً</h2>
+            <p>{error || "لم يتم العثور على الرحلة المطلوبة"}</p>
+            <button onClick={() => router.back()} className={styles.backButton}>
+              العودة للخلف
+            </button>
+          </div>
+        </Container>
+      </Layout>
+    );
+  }
+
+  // Format price and currency if they exist
+  const formattedPrice = typeof trip.price === 'object' ? 
+    (trip.price.amount || '') : trip.price || '';
   
-  // Get featured image URL
-  const featuredImageUrl = trip.featured_image?.sizes?.large?.source_url || 
-    trip._embedded?.['wp:featuredmedia']?.[0]?.source_url ||
-    trip.featured_media_url ||
-    '/images/trip-placeholder.svg';
+  const formattedCurrency = typeof trip.currency === 'object' ? 
+    (trip.currency.symbol || '') : trip.currency || '';
 
   return (
     <Layout>
